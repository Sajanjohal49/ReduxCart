{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\AdvancedRedux\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport Cart from \"./components/Cart/Cart\";\nimport Layout from \"./components/Layout/Layout\";\nimport Products from \"./components/Shop/Products\";\nimport { fetchCartData, sendDataToBackend } from \"./components/store/action-creator\";\nimport Notification from \"./components/UI/Notification\"; //we have use this function to hide notification after access the data\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet isInitial = true;\n\nfunction App() {\n  _s();\n\n  const dispatch = useDispatch();\n  const isCart = useSelector(state => state.cart.isShowCart);\n  const notification = useSelector(state => state.cart.notification);\n  const cart = useSelector(state => state.cartLogic);\n  useEffect(() => {\n    dispatch(fetchCartData());\n  }, [dispatch]);\n  useEffect(() => {\n    if (isInitial) {\n      isInitial = false;\n      return;\n    } //if the cart will change the data will only be sent to backend \n    //as before it was loading whenever the page refreshes\n\n\n    if (cart.changed) {\n      dispatch(sendDataToBackend(cart));\n    } //dispatch data from action creator component\n\n  }, [cart, dispatch]);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [notification && /*#__PURE__*/_jsxDEV(Notification, {\n      status: notification.status,\n      title: notification.title,\n      message: notification.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Layout, {\n      children: [isCart && /*#__PURE__*/_jsxDEV(Cart, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(Products, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"rCSCrOq6bC/xLN4SF+DaRt6b8CM=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = App;\nexport default App;\nconst Wrapper = styled.div`\noverflow: auto;\n\n`;\n_c2 = Wrapper;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Wrapper\");","map":{"version":3,"names":["Fragment","useEffect","useDispatch","useSelector","styled","Cart","Layout","Products","fetchCartData","sendDataToBackend","Notification","isInitial","App","dispatch","isCart","state","cart","isShowCart","notification","cartLogic","changed","status","title","message","Wrapper","div"],"sources":["C:/Users/hp/Desktop/AdvancedRedux/src/App.js"],"sourcesContent":["import { Fragment, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport Cart from \"./components/Cart/Cart\";\nimport Layout from \"./components/Layout/Layout\";\nimport Products from \"./components/Shop/Products\";\nimport {  fetchCartData, sendDataToBackend } from \"./components/store/action-creator\";\nimport Notification from \"./components/UI/Notification\";\n\n//we have use this function to hide notification after access the data\nlet isInitial = true;\n\nfunction App() {\n  const dispatch = useDispatch();\n  const isCart = useSelector((state) => state.cart.isShowCart);\n  const notification = useSelector((state) => state.cart.notification);\n  const cart = useSelector((state) => state.cartLogic);\n  \n  useEffect(()=>{\n    dispatch(fetchCartData());\n  },[dispatch]);\n  useEffect(() => {\n    if (isInitial) {\n      isInitial = false;\n      return;\n    }\n    //if the cart will change the data will only be sent to backend \n    //as before it was loading whenever the page refreshes\n    if(cart.changed){\n      dispatch(sendDataToBackend(cart));\n    }\n    //dispatch data from action creator component\n    \n  }, [cart, dispatch]);\n\n  return (\n    <Wrapper>\n\n      {notification && (\n        <Notification\n          status={notification.status}\n          title={notification.title}\n          message={notification.message}\n        />\n      )}\n      <Layout>\n        {isCart && <Cart />}\n        <Products />\n      </Layout>\n    </Wrapper>\n  );\n}\n\nexport default App;\nconst Wrapper=styled.div`\noverflow: auto;\n\n`"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAAUC,aAAV,EAAyBC,iBAAzB,QAAkD,mCAAlD;AACA,OAAOC,YAAP,MAAyB,8BAAzB,C,CAEA;;;AACA,IAAIC,SAAS,GAAG,IAAhB;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAMC,QAAQ,GAAGX,WAAW,EAA5B;EACA,MAAMY,MAAM,GAAGX,WAAW,CAAEY,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWC,UAAvB,CAA1B;EACA,MAAMC,YAAY,GAAGf,WAAW,CAAEY,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWE,YAAvB,CAAhC;EACA,MAAMF,IAAI,GAAGb,WAAW,CAAEY,KAAD,IAAWA,KAAK,CAACI,SAAlB,CAAxB;EAEAlB,SAAS,CAAC,MAAI;IACZY,QAAQ,CAACL,aAAa,EAAd,CAAR;EACD,CAFQ,EAEP,CAACK,QAAD,CAFO,CAAT;EAGAZ,SAAS,CAAC,MAAM;IACd,IAAIU,SAAJ,EAAe;MACbA,SAAS,GAAG,KAAZ;MACA;IACD,CAJa,CAKd;IACA;;;IACA,IAAGK,IAAI,CAACI,OAAR,EAAgB;MACdP,QAAQ,CAACJ,iBAAiB,CAACO,IAAD,CAAlB,CAAR;IACD,CATa,CAUd;;EAED,CAZQ,EAYN,CAACA,IAAD,EAAOH,QAAP,CAZM,CAAT;EAcA,oBACE,QAAC,OAAD;IAAA,WAEGK,YAAY,iBACX,QAAC,YAAD;MACE,MAAM,EAAEA,YAAY,CAACG,MADvB;MAEE,KAAK,EAAEH,YAAY,CAACI,KAFtB;MAGE,OAAO,EAAEJ,YAAY,CAACK;IAHxB;MAAA;MAAA;MAAA;IAAA,QAHJ,eASE,QAAC,MAAD;MAAA,WACGT,MAAM,iBAAI,QAAC,IAAD;QAAA;QAAA;QAAA;MAAA,QADb,eAEE,QAAC,QAAD;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QATF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAgBD;;GAvCQF,G;UACUV,W,EACFC,W,EACMA,W,EACRA,W;;;KAJNS,G;AAyCT,eAAeA,GAAf;AACA,MAAMY,OAAO,GAACpB,MAAM,CAACqB,GAAI;AACzB;AACA;AACA,CAHA;MAAMD,O"},"metadata":{},"sourceType":"module"}